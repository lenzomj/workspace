#!/usr/bin/env bash

WORKSPACE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source "${WORKSPACE_DIR}/scripts/dotfiles.sh"
source "${WORKSPACE_DIR}/scripts/homebrew.sh"
source "${WORKSPACE_DIR}/scripts/parse.sh"
#source "${WORKSPACE_DIR}/scripts/setup.sh"

if [[ ! -f "${HOME}/.workspace.conf" ]]; then
  setup_env "${WORKSPACE_DIR}" "${HOME}"
fi

source "${HOME}/.workspace.conf"

usage() {
  cat <<EOM
  Usage: `basename $0` <command> [arg(s)]
    Commands:
    - update [repolist]: Updates the repositories specified in [repolist]
    - export: Exports local mirror to offline mirror
              -Local:   ${WORKSPACE_MIRROR}
              -Offline: $WORKSPACE_OFFLINE_MIRROR
    - setup: Initializes the workspace by cloning dotfiles from mirror/git
EOM
  exit 0
}

patch() {
  mkdir -p $mirror/patches &> /dev/null;
  branches=()
  pushd $1 &> /dev/null;
    eval "$(git for-each-ref --shell --format='branches+=(%(refname))' refs/heads/)"
    for branch in "${branches[@]}"; do
        git checkout ${branch##*/}
        git format-patch master --stdout > \
          $mirror/patches/$1.${branch##*/}.patch
    done
  popd &> /dev/null;
}

#
# Check arguments
#
[[ "$#" -ge 1 ]] || { usage; }

if [ "$1" == "update" ]; then
  if [ "$#" -ge 2 ]; then
    parse_file manifest/$2
  else
    parse_file manifest/base
  fi
elif [ "$1" == "export" ]; then
  sync ${WORKSPACE_MIRROR} ${WORKSPACE_OFFLINE_MIRROR}
elif [ "$1" == "setup" ]; then
  if [ "$#" -ge 2 ]; then
    eval "setup_$2"
  fi
elif [ "$1" == "clean" ]; then
  if [ "$#" -ge 2 ]; then
    eval "clean_$2"
  fi
elif [ "$1" == "patch" ]; then
  [[ "$#" -ge 2 ]] || { usage; }
  patch $2
fi
