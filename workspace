#!/usr/bin/env bash

workspace=$HOME/workspace
dotfiles=$HOME/workspace/dotfiles

usage() {
  cat <<EOM
  Usage: `basename $0` <command> [arg(s)]
    Commands:
    - mirror [repolist]: Mirrors the repositories specified in [repolist]
    - init: Initializes the workspace by cloning dotfiles from mirror/git
    - push [dir] <remote>: Push mirror/[dir] to <remote>/mirror
    - pull [dir] <remote>: Pull <remote>/mirror/[dir] to mirror
EOM
  exit 0
}

mirror() {
  args=()

  if [[ -f $1 ]]; then
    while read line
    do
      args+=("$line")
    done < $1
  fi

  cwd=$(pwd)
  for line in "${args[@]}"; do
    if [[ $line == \#* ]]; then
      : # noop
    elif [[ $line == dir\:* ]]; then
      cwd=${line##*:}
      [[ -d $cwd ]] || mkdir -p $cwd
    elif [[ $line == repo\:* ]]; then
      repo_remote=${line#*:}
      repo_local=${line##*/}
      if [[ ! -d $cwd/$repo_local ]]; then
        git clone --mirror $repo_remote $cwd/$repo_local
      else
        pushd $cwd/$repo_local &> /dev/null;
          echo "Fetching $repo_remote ..."
          git remote update &> /dev/null;
        popd &> /dev/null;
      fi
    elif [[ $line == file\:* ]]; then
      file_remote=${line#*:}
      file_local=${line##*/}
      pushd $cwd &> /dev/null;
        echo "Downloading $file_remote"
        curl $file_remote --output $file_local
      popd &> /dev/null;
    fi
  done
}

initialize() {
  if [[ ! -d dotfiles ]]; then
    git clone mirror/git/base/dotfiles.git
    pushd dotfiles &> /dev/null;
      git submodule update --recursive --init
      git remote add upstream "git@github.com:lenzomj/dotfiles.git"
    popd &> /dev/null;
  else
    [[ -e $HOME/.vim ]]   || ln -s $dotfiles/vim.d $HOME/.vim
    [[ -e $HOME/.vimrc ]] || ln -s $dotfiles/common.vimrc $HOME/.vimrc
    [[ -e $HOME/.gitconfig ]] || \
      ln -s $dotfiles/common.gitconfig $HOME/.gitconfig
    [[ -e $HOME/.bashrc ]] || ln -s $dotfiles/common.bashrc $HOME/.bashrc
    [[ -e $HOME/.bash_profile ]] || \
      ln -s $dotfiles/common.bash_profile $HOME/.bash_profile
    [[ -e $HOME/.fonts ]] || ln -s $dotfiles/fonts $HOME/.fonts
    [[ ! `command -v fc-cache` ]] || fc-cache -vf $HOME/.fonts
    [[ ! `command -v vim` ]] || vim +PluginInstall +qall
  fi
}


sync() {
  src=$1
  dst=$2
  echo "Syncing $1 -> $2"
  [[ -d $dst ]] || mkdir -p $dst &> /dev/null
  [[ -d $src ]] && \
    rsync --update --delete --progress -r $src $dst
}

pull_from() {
  [[ -d $1 && -d $2 ]] && \
    rsync --update --delete --progress -r $2/mirror .
}

[[ "$#" -ge 1 ]] || { usage; }

if [ "$1" == "mirror" ]; then
  [[ "$#" -ge 2 ]] || { usage; }
  mirror repolists/$2
elif [ "$1" == "push" ]; then
  if [[ "$#" -eq 2 ]]; then
    sync mirror $2
  elif [[ "$#" -eq 3 ]]; then
    sync mirror/$2 $3/mirror/$(dirname "$2")
  fi
elif [ "$1" == "pull" ]; then
  if [[ "$#" -eq 2 ]]; then
    sync $2/mirror .
  elif [[ "$#" -eq 3 ]]; then
    sync $3/mirror/$2 mirror/$(dirname "$2")
  fi
elif [ "$1" == "init" ]; then
  initialize
fi
